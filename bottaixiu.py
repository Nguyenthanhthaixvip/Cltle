import telebot

import random

import time

import os

from datetime import datetime

import pytz # type: ignore



# Kh·ªüi t·∫°o bot v·ªõi token c·ªßa b·∫°n

TOKEN = '7206321215:AAE6LpVHg59w-d8ESyQkorfUsAtwc2-6yvM'

bot = telebot.TeleBot(TOKEN)



# ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp vƒÉn b·∫£n l∆∞u tr·ªØ s·ªë d∆∞ v√† danh s√°ch GIFcode

BALANCE_FILE = 'user_balances.txt'

GIFCODE_FILE = 'gifcodes.txt'

USED_CODES_FILE = 'used_codes.txt'



# ID c·ªßa admin

ADMIN_ID = 1313559109  # Thay b·∫±ng ID c·ªßa admin th·ª±c s·ª±



# H√†m t·∫°o ho·∫∑c c·∫≠p nh·∫≠t s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng

def update_balance(user_id, balance):

    with open(BALANCE_FILE, 'r+') as file:

        lines = file.readlines()

        file.seek(0)

        for line in lines:

            if str(user_id) in line:

                line = f"{user_id} {balance}\n"

            file.write(line)

        else:

            file.write(f"{user_id} {balance}\n")

        file.truncate()



# H√†m ƒë·ªçc s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng t·ª´ t·ªáp vƒÉn b·∫£n

def read_balance(user_id):

    with open(BALANCE_FILE, 'r') as file:

        for line in file:

            user, balance = line.split()

            if int(user) == user_id:

                return int(balance)

    return 0



# Ki·ªÉm tra xem ng∆∞·ªùi g·ª≠i tin nh·∫Øn c√≥ ph·∫£i l√† admin hay kh√¥ng

def is_admin(user_id):

    return user_id == ADMIN_ID



# H√†m t·∫°o m·ªõi t·ªáp GIFcode n·∫øu kh√¥ng t·ªìn t·∫°i

def create_gifcode_file():

    if not os.path.exists(GIFCODE_FILE):

        with open(GIFCODE_FILE, 'w'):

            pass



# H√†m ƒë·ªçc danh s√°ch GIFcode t·ª´ t·ªáp vƒÉn b·∫£n

def read_gifcodes():

    gifcodes = {}

    if os.path.exists(GIFCODE_FILE):

        with open(GIFCODE_FILE, 'r') as file:

            for line in file:

                code, amount, uses = line.strip().split(':')

                gifcodes[code] = {'amount': int(amount), 'uses': int(uses)}

    return gifcodes



# H√†m c·∫≠p nh·∫≠t danh s√°ch GIFcode v√†o t·ªáp vƒÉn b·∫£n

def update_gifcodes(gifcodes):

    with open(GIFCODE_FILE, 'w') as file:

        for code, info in gifcodes.items():

            file.write(f"{code}:{info['amount']}:{info['uses']}\n")



# H√†m ƒë·ªçc danh s√°ch m√£ ƒë√£ s·ª≠ d·ª•ng t·ª´ t·ªáp vƒÉn b·∫£n

def read_used_codes():

    used_codes = set()

    if os.path.exists(USED_CODES_FILE):

        with open(USED_CODES_FILE, 'r') as file:

            for line in file:

                if ':' in line:

                    user_id, gif_code = line.strip().split(':')

                    used_codes.add((int(user_id), gif_code))

    return used_codes



# H√†m c·∫≠p nh·∫≠t danh s√°ch m√£ ƒë√£ s·ª≠ d·ª•ng v√†o t·ªáp vƒÉn b·∫£n

def update_used_codes(used_codes):

    with open(USED_CODES_FILE, 'a') as file:  # S·ª≠a ƒë·ªïi ch·∫ø ƒë·ªô m·ªü t·ªáp th√†nh 'a' (append)

        for user_id, gif_code in used_codes:

            file.write(f"{user_id}:{gif_code}\n")  # Th√™m m√£ ƒë√£ s·ª≠ d·ª•ng m·ªõi v√†o cu·ªëi danh s√°ch



# H√†m tung x√∫c s·∫Øc v√† t√≠nh t·ªïng gi√° tr·ªã

def roll_dice():

    dice_values = []

    total_value = 0

    for _ in range(3):

        value = random.randint(1, 6)

        dice_values.append(value)

        total_value += value

    return dice_values, total_value



# X·ª≠ l√Ω tin nh·∫Øn "/start"

@bot.message_handler(commands=['start'])

def start(message):

    # Hi·ªÉn th·ªã th·ªùi gian theo m√∫i gi·ªù Vi·ªát Nam

    vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')

    vn_time = datetime.now(vn_tz).strftime('%H:%M:%S %d-%m-%Y')

    bot.reply_to(message, f"Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot t√†i x·ªâu!\nH∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:\n- ƒê·∫∑t c∆∞·ª£c: /dat 10000 T ho·∫∑c X ho·∫∑c C ho·∫∑c L\n- Nh·∫≠p GIFcode: /entercode GIFTCODEJQ2AJ\n- Chuy·ªÉn ti·ªÅn: /transfer <user_id> <s·ªë ti·ªÅn>\nTh·ªùi gian hi·ªán t·∫°i (VN): {vn_time}")



# H√†m x·ª≠ l√Ω k·∫øt qu·∫£ t√†i x·ªâu

def process_tai_xiu(total_value):

    return total_value > 10



# H√†m x·ª≠ l√Ω k·∫øt qu·∫£ ch·∫µn l·∫ª

def process_chan_le(total_value):

    if total_value % 2 == 0:

        return True  # Tr·∫£ v·ªÅ True n·∫øu t·ªïng c·ªßa ba s·ªë l√† s·ªë ch·∫µn

    else:

        return False  # Tr·∫£ v·ªÅ False n·∫øu t·ªïng c·ªßa ba s·ªë l√† s·ªë l·∫ª



# H√†m ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë·∫∑t c∆∞·ª£c m·ªõi hay kh√¥ng

def can_bet(user_id):

    current_time = time.time()

    if user_id in last_bet_time and current_time - last_bet_time[user_id] < 10:

        return False

    else:

        last_bet_time[user_id] = current_time

        return True



# X·ª≠ l√Ω tin nh·∫Øn "/dat"

@bot.message_handler(commands=['dat'])

def game_dice_play(message):

    text = message.text.split()

    if len(text) != 3 or not text[1].isdigit() or text[2].upper() not in ['T', 'X', 'C', 'L']:

        bot.reply_to(message, "‚ùå Sai ƒë·ªãnh d·∫°ng c∆∞·ª£c. Vui l√≤ng nh·∫≠p l·∫°i v·ªõi ƒë·ªãnh d·∫°ng: /dat <s·ªë ti·ªÅn c∆∞·ª£c> <t√†i ho·∫∑c x·ªâu ho·∫∑c ch·∫µn ho·∫∑c l·∫ª>")

        return

    user_id = message.from_user.id

    user_balance = read_balance(user_id)

    if user_balance < int(text[1]):

        bot.reply_to(message, "‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!")

        return

    if not can_bet(user_id):

        bot.reply_to(message, "‚ùå B·∫°n ph·∫£i ch·ªù √≠t nh·∫•t 10 gi√¢y gi·ªØa c√°c l∆∞·ª£t ƒë·∫∑t c∆∞·ª£c!")

        return

    bot.reply_to(message, "üé≤ ƒêang tung x√∫c s·∫Øc, vui l√≤ng ch·ªù 10 gi√¢y ƒë·ªÉ c√≥ k·∫øt qu·∫£...")

    time.sleep(10)  # Ch·ªù 10 gi√¢y ƒë·ªÉ tung x√∫c s·∫Øc

    dice_values, total_value = roll_dice()

    bet_type = text[2].upper()

    if bet_type == 'T':

        condition = process_tai_xiu(total_value)

    elif bet_type == 'X':

        condition = not process_tai_xiu(total_value)

    elif bet_type == 'L':

        condition = process_chan_le(total_value)

    else:  # C for Even

        condition = not process_chan_le(total_value)

    if condition:

        reward = int(int(text[1]) * 0.9)

        user_balance += reward

        update_balance(user_id, user_balance)

        # Hi·ªÉn th·ªã th·ªùi gian theo m√∫i gi·ªù Vi·ªát Nam

        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')

        vn_time = datetime.now(vn_tz).strftime('%H:%M:%S %d-%m-%Y')

        bot.reply_to(message,

                    f'‚ôª Th·ªùi gian (VN): {vn_time}\n'

                    f'‚ôª K·∫øt qu·∫£ üé≤ : {dice_values[0]} {dice_values[1]} {dice_values[2]}\n'

                    f'‚ôª Tr√∫ng c∆∞·ª£c! Nh·∫≠n ƒë∆∞·ª£c {reward} VNƒê\n'

                    f'üí∞ S·ªë d∆∞ c·ªßa b·∫°n: {user_balance} VNƒê')

    else:

        user_balance -= int(text[1])

        update_balance(user_id, user_balance)

        # Hi·ªÉn th·ªã th·ªùi gian theo m√∫i gi·ªù Vi·ªát Nam

        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')

        vn_time = datetime.now(vn_tz).strftime('%H:%M:%S %d-%m-%Y')

        bot.reply_to(message,

                    f'üí• Th·ªùi gian (VN): {vn_time}\n'

                    f'üí• K·∫øt qu·∫£ üé≤ : {dice_values[0]} {dice_values[1]} {dice_values[2]}\n'

                    f'üí• Thua c∆∞·ª£c! M·∫•t {text[1]} VNƒê\n'

                    f'üí∞ S·ªë d∆∞ c·ªßa b·∫°n: {user_balance} VNƒê')



# X·ª≠ l√Ω tin nh·∫Øn "/topup"

# X·ª≠ l√Ω tin nh·∫Øn "/topup"

@bot.message_handler(commands=['topup'])

def topup(message):

    if not is_admin(message.from_user.id):

        bot.reply_to(message, "‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ n·∫°p ti·ªÅn!")

        return

    # Ki·ªÉm tra xem tin nh·∫Øn ƒë∆∞·ª£c tr·∫£ l·ªùi c√≥ t·ªìn t·∫°i kh√¥ng

    if message.reply_to_message is None:

        bot.reply_to(message, "‚ùå Tin nh·∫Øn n√†y kh√¥ng ph·∫£i l√† m·ªôt ph·∫£n h·ªìi ƒë·∫øn m·ªôt tin nh·∫Øn kh√°c!")

        return



    text = message.text.split()

    if len(text) != 2 or not text[1].isdigit():

        bot.reply_to(message, "‚ùå Sai ƒë·ªãnh d·∫°ng n·∫°p ti·ªÅn. Vui l√≤ng nh·∫≠p l·∫°i v·ªõi ƒë·ªãnh d·∫°ng: /topup <s·ªë ti·ªÅn>")

        return



    # L·∫•y user_id t·ª´ tin nh·∫Øn ƒë∆∞·ª£c tr·∫£ l·ªùi

    user_id = message.reply_to_message.from_user.id

    topup_amount = int(text[1])

    user_balance = read_balance(user_id) + topup_amount

    update_balance(user_id, user_balance)

    bot.reply_to(message, f"‚úÖ ƒê√£ n·∫°p {topup_amount} VNƒê v√†o t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng. S·ªë d∆∞ m·ªõi: {user_balance} VNƒê")



# X·ª≠ l√Ω tin nh·∫Øn "/giftcode"

@bot.message_handler(commands=['giftcode'])

def giftcode(message):

    if not is_admin(message.from_user.id):

        bot.reply_to(message, "‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ t·∫°o v√† ph√¢n ph·ªëi giftcode!")

        return

    text = message.text.split()

    if len(text) != 4 or not text[2].isdigit() or not text[3].isdigit():

        bot.reply_to(message, "‚ùå Sai ƒë·ªãnh d·∫°ng giftcode. Vui l√≤ng nh·∫≠p l·∫°i v·ªõi ƒë·ªãnh d·∫°ng: /giftcode <s·ªë l∆∞·ª£ng> <s·ªë ti·ªÅn> <s·ªë l·∫ßn s·ª≠ d·ª•ng>")

        return

    num_codes = int(text[1])

    giftcode_amount = int(text[2])

    uses = int(text[3])

    generated_codes = []

    gifcodes = read_gifcodes()

    for _ in range(num_codes):

        code = text[0].upper() + ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=5))

        gifcodes[code] = {'amount': giftcode_amount, 'uses': uses}

        generated_codes.append(f"{code}: {giftcode_amount} VNƒê")

    update_gifcodes(gifcodes)

    bot.reply_to(message, f"‚úÖ ƒê√£ t·∫°o {num_codes} giftcode m·ªõi v·ªõi s·ªë ti·ªÅn {giftcode_amount} VNƒê v√† s·ªë l·∫ßn s·ª≠ d·ª•ng {uses}:\n" + '\n'.join(generated_codes))



# X·ª≠ l√Ω tin nh·∫Øn "/entercode"

@bot.message_handler(commands=['entercode'])

def enter_code(message):

    text = message.text.split()

    if len(text) != 2:

        bot.reply_to(message, "‚ùå Sai ƒë·ªãnh d·∫°ng. Vui l√≤ng nh·∫≠p l·∫°i v·ªõi ƒë·ªãnh d·∫°ng: /entercode <GIFcode>")

        return

    gif_code = text[1]

    gifcodes = read_gifcodes()

    if (message.from_user.id, gif_code) in read_used_codes():

        bot.reply_to(message, "‚ùå B·∫°n ƒë√£ s·ª≠ d·ª•ng code n√†y r·ªìi!")

        return

    if gif_code not in gifcodes:

        bot.reply_to(message, "‚ùå GIFcode kh√¥ng h·ª£p l·ªá!")

        return

    user_id = message.from_user.id

    user_balance = read_balance(user_id)

    gifcode_amount = gifcodes[gif_code]['amount']

    user_balance += gifcode_amount

    gifcodes[gif_code]['uses'] -= 1

    update_balance(user_id, user_balance)

    update_used_codes({(user_id, gif_code)})

    update_gifcodes(gifcodes)

    bot.reply_to(message, f"‚úÖ Nh·∫≠p GIFcode th√†nh c√¥ng! Nh·∫≠n ƒë∆∞·ª£c {gifcode_amount} VNƒê. S·ªë d∆∞ m·ªõi: {user_balance} VNƒê")



# X·ª≠ l√Ω tin nh·∫Øn "/transfer"

@bot.message_handler(commands=['transfer'])

def transfer_balance(message):

    text = message.text.split()

    if len(text) != 3 or not text[1].isdigit() or not text[2].isdigit():

        bot.reply_to(message, "‚ùå Sai ƒë·ªãnh d·∫°ng chuy·ªÉn ti·ªÅn. Vui l√≤ng nh·∫≠p l·∫°i v·ªõi ƒë·ªãnh d·∫°ng: /transfer <user_id> <s·ªë ti·ªÅn>")

        return

    sender_id = message.from_user.id

    receiver_id = int(text[1])

    amount = int(text[2])

    sender_balance = read_balance(sender_id)

    receiver_balance = read_balance(receiver_id)

    if sender_balance < amount:

        bot.reply_to(message, "‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch!")

        return

    sender_balance -= amount

    receiver_balance += amount

    update_balance(sender_id, sender_balance)

    update_balance(receiver_id, receiver_balance)

    bot.reply_to(message, f"‚úÖ Giao d·ªãch th√†nh c√¥ng! ƒê√£ chuy·ªÉn {amount} VNƒê cho ng∆∞·ªùi d√πng {receiver_id}. S·ªë d∆∞ m·ªõi c·ªßa b·∫°n: {sender_balance} VNƒê")



# Ch·∫°y bot

if __name__ == "__main__":

    if not os.path.exists(BALANCE_FILE):

        with open(BALANCE_FILE, 'w'):

            pass

    create_gifcode_file()

    last_bet_time = {}  # L∆∞u tr·ªØ th·ªùi gian l·∫ßn cu·ªëi c√πng m·ªói ng∆∞·ªùi ch∆°i ƒë·∫∑t c∆∞·ª£c

    bot.polling()
